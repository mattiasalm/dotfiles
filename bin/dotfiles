#!/bin/zsh

# Include tools as binary functions
PATH=$PATH:$DOTFILES_PATH/tools

_BIN_NAME=$(basename $0)

show_help() {
	color-print green "\nUsage: $_BIN_NAME <command>\n"
	color-print green "Commands:"
	color-print green "  help\t\t\t- Show this help message"
	color-print green "  all\t\t\t- Do all installation steps"
	color-print green "  prepare\t\t- Prepare system for further installation"
	color-print green "  managers\t\t- Install application managers"
	color-print green "  applications\t\t- Install applications"
	color-print green "  macos-settings\t- Applies macOS settings"
	color-print green "  configuration\t\t- Add system configuration"
	color-print green "  update\t\t- Update system, managers and applications"
}

run_command() {
	_COMMAND=$1

	if [ -f $DOTFILES_PATH/commands/$_COMMAND.sh ]; then
		color-print cyan "\nRuns $_COMMAND command...\n"
		. $DOTFILES_PATH/commands/$_COMMAND.sh
	else
		color-print red "Command \"$_COMMAND\" can not be found.\n\n"
		show_help
	fi
}

run_all_commands() {
	_COMMANDS=("managers" "applications" "macos-settings" "configuration")

	color-print cyan "\nThis will run commands:"
	for _COMMAND in $_COMMANDS; do
		color-print cyan " - $_COMMAND"
	done
	color-print cyan "\n\nContinue?\n"

	select-option $DOTFILES_PATH/.tmp No Yes
	_SELECTED_OPTION=$(<$DOTFILES_PATH/.tmp)
	if (( _SELECTED_OPTION == 1 )); then
		ask-sudo

		for _COMMAND in $_COMMANDS; do
			run_command $_COMMAND
		done
	fi
}

case $1 in
	"" | "--help" | "-h" | "help")
		show_help
		;;

	"all")
		run_all_commands
		;;

	*)
		run_command $1
		;;
esac