#!/bin/zsh -e

# Include tools as binary functions
PATH=$PATH:$DOTFILES_PATH/tools

_BIN_NAME=$(basename $0)
_COMMAND=$1

show_help() {
	color-print green "\nUsage: $_BIN_NAME <command>\n"
	color-print green "Commands:"
	color-print green "  help\t\t\t- Show this help message"
	color-print green "  all\t\t\t- Do all installation steps"
	color-print green "  prepare\t\t- Prepare system for further installation"
	color-print green "  managers\t\t- Install application managers"
	color-print green "  applications\t\t- Install applications"
	color-print green "  macos-settings\t- Applies macOS settings"
	color-print green "  configuration\t\t- Add system configuration"
	color-print green "  update\t\t- Update system, managers and applications"
}

case $_COMMAND in
	"" | "--help" | "-h" | "help")
		show_help
		;;

	"all")
		_STEPS=("managers" "applications" "macos-settings" "configuration")
		color-print cyan "This will run commands:"
		for _STEP in $_STEPS; do
			color-print cyan " - $_STEP"
		done
		color-print cyan "\nContinue?"

		_ANSWER=No
		select _RESULT in Yes No; do
			_ANSWER=$_RESULT
			break
		done

		if [[ $_ANSWER == "Yes" ]]; then
			ask-sudo

			for _STEP in $_STEPS; do
				color-print cyan "\nRuns $_STEP command...\n"
				. $DOTFILES_PATH/commands/$_STEP.sh
			done
		fi
	;;

	*)
		shift
		if [ -f $DOTFILES_PATH/commands/$_COMMAND.sh ]; then
			color-print cyan "\nRuns $_COMMAND command...\n"
			. $DOTFILES_PATH/commands/$_COMMAND.sh
		else
			color-print red "Command \"$_COMMAND\" can not be found.\n\n"
			show_help
		fi
		;;
esac