#!/bin/zsh

# Include tools as binary functions
PATH=$PATH:$DOTFILES_PATH/tools

# Trap ctrl+c (abort script)
# To make sure that stty is restored
_STTY_STATE=$(stty -g)
reset_stty() {
	stty $_STTY_STATE &>/dev/null
}

TRAPINT() {
	reset_stty
	return 1
}

# Input arguments
_RESULT_FILE=$1

# Check if any output file has been provided
if [ -z $_RESULT_FILE ]; then
	color-print red "No output file provided"
	exit 1
fi

# Create output file
touch $_RESULT_FILE

# Grab options from arguments
shift
_OPTIONS=(${@})
_OPTIONS_LENGTH=$(expr ${#_OPTIONS[@]} - 1)
_CURSOR=0

# Check if any options has been provided
if [ "$_OPTIONS_LENGTH" -lt 0 ]; then
	color-print red "No options provided"
	exit 1
fi

# Clear options prompt
clear_options() {
	tput civis
	tput cuu1
	tput el
	for _ in ${_OPTIONS[@]}; do
		tput cuu1
		tput el
	done
	tput cnorm
}

# Print options prompt
print_options() {
	local _COUNTER=0
	for _OPTION in ${_OPTIONS[@]}; do
		if (( _COUNTER == _CURSOR )); then
			echo " \e[1m\e[32mâ†’\e[0m  \e[1m$_OPTION\e[0m"
		else
			echo "    $_OPTION"
		fi
		((_COUNTER++))
	done
	echo
}

# Check keycode value and perform associated actions
check_key_code() {
	local _KEYCODE=$1

	# Key: up
	if [[ $_KEYCODE =~ "1b5b 4100" ]]; then
		(( _CURSOR > 0 )) && (( _CURSOR-- ))
		clear_options
		print_options
		catch_key_press

	# Key: down
	elif [[ $_KEYCODE =~ "1b5b 4200" ]]; then
		(( _CURSOR < _OPTIONS_LENGTH )) && (( _CURSOR++ ))
		clear_options
		print_options
		catch_key_press

	# Key: enter
	elif [[ $_KEYCODE =~ "0d00 0000" ]]; then
		echo $_CURSOR > $_RESULT_FILE
		exit 0

	# Key: esc
	elif [[ $_KEYCODE =~ "1b00 0000" ]]; then
		exit 1

	fi
}

# Catch key press action and convert to keycode
catch_key_press() {
	local _KEYCODE
	{
		stty raw isig -echo
		local _KEY=$(dd bs=8 conv=sync count=1)
		_KEYCODE=$(printf %s $_KEY | xxd)
		reset_stty
	} </dev/tty 2>/dev/null
	check_key_code $_KEYCODE
}

print_options
catch_key_press